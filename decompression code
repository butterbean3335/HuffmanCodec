// PASTE THIS INTO THE DECOMPRESSION SECTION OF THE ACTUAL FILE

 else{
        // decompression
        character_frequencies = (unsigned int*)calloc(sizeof(unsigned int), MAX);
        unsigned int freq;
        priority_queue = (Node**)calloc(sizeof(Node*), MAX);
        int num_c = 0;

        // first 256 unsigned ints worth of data in the file is the character frequencies
        for (unsigned char c=0; c<256; c++) {
            fread(&freq, sizeof(unsigned int), 1, inputFile);
            character_frequencies[c] = freq;

            // fill the priority queue with all characters included in the compressed file
            if (freq != 0) {
                priority_queue[num_c] = create_node(c, freq, NULL, NULL);
                num_c++;
            }
        }

        // reallocate to get rid of unnecessarily allocated memory
        priority_queue = (Node**)realloc(priority_queue, sizeof(Node*) * num_c); 

        // sort priority queue
        Node* tmp;
        for (int l=0; l<num_c-1; l++) {
            for (int m=0; m<num_c-l-1; m++) {
                // check if this character has a higher frequency than the next
                if (character_frequencies[priority_queue[m]->character] > character_frequencies[priority_queue[m+1]->character]) {
                    // swap these two nodes in the priority queue
                    tmp = priority_queue[m];
                    priority_queue[m] = priority_queue[m+1];
                    priority_queue[m+1] = tmp;
                }
                
                // check if this character has a greater ASCII value than the next
                else if (priority_queue[m]->character > priority_queue[m+1]->character) {
                    // swap these two nodes in the priority queue
                    tmp = priority_queue[m];
                    priority_queue[m] = priority_queue[m+1];
                    priority_queue[m+1] = tmp;
                }
            }
        }

        // fill frequency information into the priority_queue's nodes (prob should have just done this before sorting ngl)
        for (int c=0; c<num_c; c++) {
            priority_queue[c]->frequency = character_frequencies[priority_queue[c]->character];
        }

        // construct binary search tree
        Tree *tree = (Tree*)calloc(sizeof(Tree), 1);  // should be same size as priority_queue right?
        tree->size = 0;
        tree->nodes = (Node**)calloc(sizeof(Node*), MAX);
        for(int c=0; c<num_c; c++)
        {
            tree->nodes[c] = create_node(priority_queue[c]->character, priority_queue[c]->frequency, NULL, NULL);
        }
        tree->size = num_c;

        // convert tree to minheap to facilitate node combinations
        makeMinHeap(tree);

        // do node combinations as required by huffman codec
        Node *lowest;
        Node *secondLowest;
        Node *sumNode;
        int sumFrequency = 0;

        while(tree->size > 0)  { 
            lowest = remove_min_node(tree); // remove lowest item in the tree
            secondLowest = remove_min_node(tree);   // remove second lowest item in the tree
            sumFrequency = lowest->frequency + secondLowest->frequency;
            sumNode = create_node(0, sumFrequency, lowest, secondLowest);

            // if only one more node in the tree, that node is the root_node
            if(tree->size == 1){
                root_node = remove_min_node(tree);
            }
        }

        // the next byte of data begins the codes
        unsigned char readIn;
        unsigned char buffer;
        bool bit;
        int codeLength = 1;
        int lengthStepper = 7;
        int bufferLength = 0;
        Node *rover = root_node;

        while (fread(&readIn, sizeof(unsigned char), 1, inputFile) > 0) {
            while (lengthStepper >= 0) {
                // probably need to check if we're in the middle of a code that spans bytes

                // if not finished with current byte keep checking bits in byte
                buffer = readIn >> lengthStepper;

                // check if the bit at position lengthStepper is 0 or 1
                if (buffer & 0b00000001 == 0b00000001) {
                    bit = 1;
                } else {
                    bit = 0;
                }

                if (bit == 1) {
                    // traverse to the right
                    rover = rover->right_child;

                } else if (bit == 0) {
                    // traverse to the left
                    rover = rover->left_child;
                }

                // check if rover has any children
                if (rover->right_child == NULL && rover->left_child == NULL) {
                    // rover does not have any children, this is the character we want to print
                    fwrite(rover->character, sizeof(unsigned char), 1, outputFile);

                    // reset rover
                    rover = root_node;
        
                } else {
                    // rover has children, still more bits in code
                }

            }
        }
        



        
    }
